{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Elgohry Store\\\\social-media-app\\\\frontend\\\\src\\\\components\\\\PostList.js\",\n  _s = $RefreshSig$();\n// src/components/PostList.js\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport Post from './Post';\nimport PostForm from './PostForm'; // Ensure you import the PostForm component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostList = () => {\n  _s();\n  const [posts, setPosts] = useState([]);\n\n  // Function to fetch posts from the server\n  const fetchPosts = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/api/posts', {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n      setPosts(response.data);\n    } catch (error) {\n      console.error('Error fetching posts:', error);\n    }\n  };\n\n  // useEffect to fetch posts on component mount\n  useEffect(() => {\n    fetchPosts();\n  }, []); // Empty dependency array to run only on mount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(PostForm, {\n      fetchPosts: fetchPosts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), \" \", posts.length > 0 ?\n    // Check if there are posts to display\n    posts.map(post => /*#__PURE__*/_jsxDEV(Post, {\n      post: post,\n      fetchPosts: fetchPosts\n    }, post._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 21\n    }, this) // Pass fetchPosts to Post\n    ) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No posts available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }, this) // Message when there are no posts\n    ]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n};\n_s(PostList, \"bG8V4duoIfO0BEPgauWMVT5Qvyw=\");\n_c = PostList;\nexport default PostList;\nvar _c;\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"names":["React","useEffect","useState","axios","Post","PostForm","jsxDEV","_jsxDEV","PostList","_s","posts","setPosts","fetchPosts","response","get","headers","localStorage","getItem","data","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","post","_id","_c","$RefreshReg$"],"sources":["C:/Users/Elgohry Store/social-media-app/frontend/src/components/PostList.js"],"sourcesContent":["// src/components/PostList.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport Post from './Post';\r\nimport PostForm from './PostForm'; // Ensure you import the PostForm component\r\n\r\nconst PostList = () => {\r\n    const [posts, setPosts] = useState([]);\r\n\r\n    // Function to fetch posts from the server\r\n    const fetchPosts = async () => {\r\n        try {\r\n            const response = await axios.get('http://localhost:5000/api/posts', {\r\n                headers: {\r\n                    'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n                }\r\n            });\r\n            setPosts(response.data);\r\n        } catch (error) {\r\n            console.error('Error fetching posts:', error);\r\n        }\r\n    };\r\n\r\n    // useEffect to fetch posts on component mount\r\n    useEffect(() => {\r\n        fetchPosts();\r\n    }, []); // Empty dependency array to run only on mount\r\n\r\n    return (\r\n        <div>\r\n            <PostForm fetchPosts={fetchPosts} /> {/* Include the PostForm component */}\r\n            {posts.length > 0 ? ( // Check if there are posts to display\r\n                posts.map(post => (\r\n                    <Post key={post._id} post={post} fetchPosts={fetchPosts} /> // Pass fetchPosts to Post\r\n                ))\r\n            ) : (\r\n                <p>No posts available.</p> // Message when there are no posts\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PostList;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,QAAQ,MAAM,YAAY,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;;EAEtC;EACA,MAAMU,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC3B,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAG,CAAC,iCAAiC,EAAE;QAChEC,OAAO,EAAE;UACL,eAAe,EAAE,UAAUC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;QAC5D;MACJ,CAAC,CAAC;MACFN,QAAQ,CAACE,QAAQ,CAACK,IAAI,CAAC;IAC3B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IACjD;EACJ,CAAC;;EAED;EACAlB,SAAS,CAAC,MAAM;IACZW,UAAU,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACIL,OAAA;IAAAc,QAAA,gBACId,OAAA,CAACF,QAAQ;MAACO,UAAU,EAAEA;IAAW;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,KAAC,EACpCf,KAAK,CAACgB,MAAM,GAAG,CAAC;IAAK;IAClBhB,KAAK,CAACiB,GAAG,CAACC,IAAI,iBACVrB,OAAA,CAACH,IAAI;MAAgBwB,IAAI,EAAEA,IAAK;MAAChB,UAAU,EAAEA;IAAW,GAA7CgB,IAAI,CAACC,GAAG;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAuC,CAAC,CAAC;IAC/D,CAAC,gBAEFlB,OAAA;MAAAc,QAAA,EAAG;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,CAAC;IAC9B;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAAChB,EAAA,CAlCID,QAAQ;AAAAsB,EAAA,GAARtB,QAAQ;AAoCd,eAAeA,QAAQ;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}